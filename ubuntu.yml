---
- hosts: all
  remote_user: root
  tasks:
    - name: Make sure we have all required packages
      package:
        name: "{{ item }}"
        state: latest
      with_items:
        - apt-transport-https
        - build-essential
        - curl
        - gawk
        - iptables
        - pkg-config
        - libaio-dev
        - libcap-dev
        - libprotobuf-dev
        - libseccomp2
        - libseccomp-dev
        - protobuf-compiler
        - python-minimal
        - libglib2.0-dev
        - libjson-glib-dev
        - libapparmor-dev
        - btrfs-tools
        - libdevmapper1.02.1
        - libdevmapper-dev
        - libgpgme11-dev
        - aptitude
    - name: Update and upgrade apt packages
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400 #One day
    - name: Make directories
      file:
        path: "{{ item }}"
        state: directory
      with_items:
           - /usr/local/go
           - /etc/systemd/system/kubelet.service.d/
           - /var/lib/etcd
           - /etc/containers
    - name: install Golang upstream
      shell: |
              curl -fsSL "https://golang.org/dl/go1.8.3.linux-amd64.tar.gz" \
              | tar -xzC /usr/local
    - name: link golang
      file: src=/usr/local/go/bin/go dest=/usr/bin/go state=link
    - name: clone runc
      git:
        repo: https://github.com/opencontainers/runc
        dest: /root/src/github.com/opencontainers/runc
      register: clone_runc
    - name: clone CRI-O
      git:
        repo: https://github.com/kubernetes-incubator/cri-o
        dest: /root/src/github.com/kubernetes-incubator/cri-o
        version: kube-1.6.x
      register: clone_crio
    - name: clone CNI
      git:
        repo: https://github.com/containernetworking/plugins
        dest: /root/src/github.com/containernetworking/plugins
      register: clone_cni
    - name: build runc
      shell: |
              cd /root/src/github.com/opencontainers/runc && \
              export GOPATH=/root && \
              make BUILDTAGS="seccomp selinux" && \
              make install
      when: clone_runc.changed
    - name: link runc
      file: src=/usr/local/sbin/runc dest=/usr/bin/runc state=link
    - name: build cri-o
      shell: |
              cd /root/src/github.com/kubernetes-incubator/cri-o && \
              make install.tools && \
              make && \
              make install && \
              make install.systemd && \
              make install.config && \
              cp test/policy.json /etc/containers/policy.json
      environment:
        PATH: "/usr/local/bin/go:{{ (ansible_env|default({})).PATH|default('') }}"
      when: clone_crio.changed
    - name: build CNI stuff
      shell: |
              cd /root/src/github.com/containernetworking/plugins && \
              ./build.sh && \
              mkdir -p /opt/cni/bin && \
              cp bin/* /opt/cni/bin/
      when: clone_cni.changed
    - name: run with overlay2
      replace:
        regexp: 'storage_driver = ""'
        replace: 'storage_driver = "overlay2"'
        name: /etc/crio/crio.conf
        backup: yes
    - name: enable and start CRI-O
      systemd:
        name: crio
        state: started
        enabled: yes
        daemon_reload: yes
    - name: modprobe br_netfilter
      command: "modprobe br_netfilter"
      ignore_errors: true
    - name: tune sysctl
      lineinfile:
        line: "net/bridge/bridge-nf-call-iptables = 1"
        dest: /etc/sysctl.conf
        insertafter: 'EOF'
        regexp: '\/net\/bridge\/bridge-nf-call-iptables = 1'
        state: present
      ignore_errors: true
    - name: reload sysctl
      command: "sysctl -p"
      ignore_errors: true
    - name: systemd dropin for kubeadm
      shell: |
              sh -c 'echo "[Service]
              Environment=\"KUBELET_EXTRA_ARGS=--enable-cri=true --container-runtime=remote --runtime-request-timeout=15m --image-service-endpoint /var/run/crio.sock --container-runtime-endpoint /var/run/crio.sock\"" > /etc/systemd/system/kubelet.service.d/0-crio.conf'
    - name: flush iptables
      command: "iptables -F"
